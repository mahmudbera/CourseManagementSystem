// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace ManagementSystem.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Entities.Model.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassroomId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            Capacity = 30,
                            ClassroomName = "Room A",
                            CourseId = 1
                        },
                        new
                        {
                            ClassroomId = 2,
                            Capacity = 25,
                            ClassroomName = "Room B",
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("Entities.Model.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InstructorId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Math 101",
                            Credits = 3,
                            Description = "Basic Mathematics",
                            InstructorId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "History 101",
                            Credits = 3,
                            Description = "Basic History",
                            InstructorId = 2
                        });
                });

            modelBuilder.Entity("Entities.Model.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(568),
                            StudentId = 1
                        },
                        new
                        {
                            EnrollmentId = 2,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(585),
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Entities.Model.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            Email = "johndoe@email.com",
                            FirstName = "John",
                            HireDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(2251),
                            LastName = "Doe"
                        },
                        new
                        {
                            InstructorId = 2,
                            Email = "janesmith@email.com",
                            FirstName = "Jane",
                            HireDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(2260),
                            LastName = "Smith"
                        });
                });

            modelBuilder.Entity("Entities.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@email.com",
                            EnrollmentDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(3901),
                            FirstName = "Alice",
                            LastName = "Johnson"
                        },
                        new
                        {
                            StudentId = 2,
                            DateOfBirth = new DateTime(2000, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@email.com",
                            EnrollmentDate = new DateTime(2024, 11, 30, 13, 14, 21, 587, DateTimeKind.Local).AddTicks(3909),
                            FirstName = "Bob",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("Entities.Model.Classroom", b =>
                {
                    b.HasOne("Entities.Model.Course", "Course")
                        .WithOne("Classroom")
                        .HasForeignKey("Entities.Model.Classroom", "CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.Model.Course", b =>
                {
                    b.HasOne("Entities.Model.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Model.Enrollment", b =>
                {
                    b.HasOne("Entities.Model.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Model.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Model.Course", b =>
                {
                    b.Navigation("Classroom")
                        .IsRequired();

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Entities.Model.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Entities.Model.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
